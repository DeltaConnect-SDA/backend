// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  firstName String
  LastName  String
  email     String  @unique
  phone     String  @unique
  password  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role                Role                  @relation(fields: [roleId], references: [id])
  roleId              String
  UserDetail          UserDetail            @relation(fields: [userDetailId], references: [id], onDelete: Cascade)
  userDetailId        String                @unique
  Complaint           Complaint[]
  ComplaintSaved      ComplaintSaved[]
  ComplaintFeedBack   ComplaintFeedBack[]
  Notification        Notification[]
  Device              Device[]
  ComplaintActivity   ComplaintActivity[]
  VerificationRequest VerificationRequest[]
  Suggestion          Suggestion[]
  SuggestionActivity  SuggestionActivity[]
  SuggestionSaved     SuggestionSaved[]
  SuggestionFeedBack  SuggestionFeedBack[]
  SuggestionComments  SuggestionComments[]
  SuggestionVotes     SuggestionVotes[]
}

model UserDetail {
  id              String  @id @default(uuid())
  identityNumber  String? @unique
  isDeleted       Boolean @default(false)
  isActive        Boolean @default(false)
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  isVerified      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  type        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User              User[]
  assignedComplaint Complaint[]  @relation("AssignedToRole")
  Suggestion        Suggestion[] @relation("AssignedToRole")
}

model Status {
  id    Int    @id @default(autoincrement())
  title String
  color String

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Complaint           Complaint[]
  ComplaintActivity   ComplaintActivity[]
  VerificationLog     VerificationLog[]
  VerificationRequest VerificationRequest[]
  Suggestion          Suggestion[]
  SuggestionActivity  SuggestionActivity[]
}

model Complaint {
  id     Int    @id @default(autoincrement())
  ref_id String @unique
  title  String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  priority   Priority @relation(fields: [priorityId], references: [id])
  priorityId Int

  description     String
  detail_location String
  GPSaddress      String
  lat             String
  long            String
  village         String
  isVerified      Boolean @default(false)

  total_feedback Int?
  total_score    Int?

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int    @default(1)

  assignTo   Role?   @relation(name: "AssignedToRole", fields: [assignToId], references: [id])
  assignToId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ComplaintActivity ComplaintActivity[]
  ComplaintImages   ComplaintImages[]
  ComplaintSaved    ComplaintSaved[]
  ComplaintFeedBack ComplaintFeedBack[]
}

model ComplaintImages {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  title String

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Complaint  Complaint[]
  Suggestion Suggestion[]
}

model ComplaintActivity {
  id          Int       @id @default(autoincrement())
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    Int
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  descripiton String
  notes       String?

  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  images    ComplaintActivityImages[]
}

model ComplaintActivityImages {
  id                  Int               @id @default(autoincrement())
  complaintActivity   ComplaintActivity @relation(fields: [complaintActivityId], references: [id], onDelete: Cascade)
  complaintActivityId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ComplaintSaved {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Priority {
  id    Int    @id @default(autoincrement())
  title String
  color String

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Complaint  Complaint[]
  Suggestion Suggestion[]
}

model ComplaintFeedBack {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  feedbackNote String
  feedackScore Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  status  NotificationStatus @default(WAITING)
  title   String
  content String
  route   String?
  param   String?
  type    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Device {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  deviceToken String
  deviceType  String
  lastSent    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("devices")
}

enum NotificationStatus {
  SENT
  FAILED
  WAITING
  READ
}

model VerificationRequest {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  VerificationLog VerificationLog[]

  @@map("verification_requests")
}

model VerificationLog {
  id                    Int                 @id @default(autoincrement())
  verificationRequest   VerificationRequest @relation(fields: [verificationRequestId], references: [id], onDelete: Cascade)
  verificationRequestId String
  title                 String
  content               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Status    Status?  @relation(fields: [statusId], references: [id])
  statusId  Int?

  @@map("verifiaction_logs")
}

model Suggestion {
  id     Int    @id @default(autoincrement())
  ref_id String @unique
  title  String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  priority   Priority @relation(fields: [priorityId], references: [id])
  priorityId Int

  description String
  location    String
  isVerified  Boolean @default(false)

  total_feedback Int?
  total_score    Int?

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int    @default(1)

  upVoteTotal   Int @default(0)
  downVoteTotal Int @default(0)

  assignTo   Role?   @relation(name: "AssignedToRole", fields: [assignToId], references: [id])
  assignToId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  SuggestionActivity SuggestionActivity[]
  SuggestionImages   SuggestionImages[]
  SuggestionSaved    SuggestionSaved[]
  SuggestionFeedBack SuggestionFeedBack[]
  SuggestionComments SuggestionComments[]
  SuggestionVotes    SuggestionVotes[]

  @@map("suggestions")
}

model SuggestionImages {
  id           Int        @id @default(autoincrement())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuggestionActivity {
  id           Int        @id @default(autoincrement())
  status       Status     @relation(fields: [statusId], references: [id])
  statusId     Int
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  descripiton String
  notes       String?

  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  images    SuggestionActivityImages[]
}

model SuggestionActivityImages {
  id                   Int                @id @default(autoincrement())
  suggestionActivity   SuggestionActivity @relation(fields: [suggestionActivityId], references: [id], onDelete: Cascade)
  suggestionActivityId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuggestionSaved {
  id           Int        @id @default(autoincrement())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuggestionFeedBack {
  id           Int        @id @default(autoincrement())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  feedbackNote String
  feedackScore Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suggestion_feedbacks")
}

model SuggestionVotes {
  id           Int        @id @default(autoincrement())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  isUp         Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuggestionComments {
  id           Int        @id @default(autoincrement())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  content  String
  Children SuggestionComments[] @relation("Suggestion_Comment_Children")
  parent   SuggestionComments?  @relation("Suggestion_Comment_Children", fields: [parentId], references: [id])
  parentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
