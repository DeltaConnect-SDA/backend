// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  firstName String
  LastName  String
  email     String  @unique
  phone     String  @unique
  password  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         Role        @relation(fields: [roleId], references: [id])
  roleId       String
  UserDetail   UserDetail  @relation(fields: [userDetailId], references: [id], onDelete: Cascade)
  userDetailId String      @unique
  Complaint    Complaint[]
}

model UserDetail {
  id              String  @id @default(uuid())
  identityNumber  String? @unique
  isDeleted       Boolean @default(false)
  isActive        Boolean @default(false)
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  isVerified      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  type        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User              User[]
  assignedComplaint Complaint[] @relation("AssignedToRole")
}

model Status {
  id    Int    @id @default(autoincrement())
  title String
  color String

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Complaint         Complaint[]
  ComplaintActivity ComplaintActivity[]
}

model Complaint {
  id     Int    @id @default(autoincrement())
  ref_id String @unique
  title  String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  priority   Priority @relation(fields: [priorityId], references: [id])
  priorityId Int

  description     String
  detail_location String
  GPSaddress      String
  lat             String
  long            String
  village         String

  total_feedback Int?
  total_score    Int?

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int    @default(1)

  assignTo   Role?   @relation(name: "AssignedToRole", fields: [assignToId], references: [id])
  assignToId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ComplaintActivity ComplaintActivity[]
  ComplaintImages   ComplaintImages[]
}

model ComplaintImages {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  title String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Complaint Complaint[]
}

model ComplaintActivity {
  id          Int       @id @default(autoincrement())
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    Int
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId Int

  title       String
  descripiton String
  notes       String

  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  images    ComplaintActivityImages[]
}

model ComplaintActivityImages {
  id                  Int               @id @default(autoincrement())
  complaintActivity   ComplaintActivity @relation(fields: [complaintActivityId], references: [id], onDelete: Cascade)
  complaintActivityId Int

  path        String
  placeholder String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Priority {
  id    Int    @id @default(autoincrement())
  title String
  color String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Complaint Complaint[]
}
